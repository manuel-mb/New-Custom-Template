/**
 * General SASS Functions.
 *
 * @package Manuel\Theme.
 *
 */

/**
 * Generic clearfix helper.
 *
 * Usage: @include clearfix;
 */

@mixin clearfix {
	&::after {
		content: "";
		display: table;
		clear: both;
	}
}

/**
 * Alignment
 *
 * Mixin to handle alignment in various directions. Handles mobile styles.
 *
 * @param  {string} $direction: left, right or center.
 *
 * Usage: @include align( left );
 * Usage: @include align( right );
 * Usage: @include align( center );
 */

@mixin align( $direction: left ) {
	float: none;
	display: block;
	clear: both;
	margin: 0 auto 1.5em;

	@media screen and ( min-width: 720 ) { // todo: fix this min width; replace with variable.
		@if #{$direction} == left {
			display: inline;
			float: #{$direction};
			margin-right: 1.5em;
			margin-bottom: 1em;
		} @else if #{$direction} == right {
			display: inline;
			float: #{$direction};
			margin-left: 1.5em;
			margin-bottom: 1em;
		}
	}
}

/*
 * For all those times we really don't need list styles!
 */

@mixin cancel-list-styles {
	list-style-type: none;
	margin: 0;
	padding: 0;
}

/*
 * For all those times we actually want a button to look like a link!
 */

@mixin cancel-button-styles {
	background-color: inherit;
	border: 0;
	box-shadow: none;
	color: inherit;
	font-size: inherit;
	font-weight: inherit;
	line-height: 1;
}

/*
 * Reset link hover and active styles.
 */

@mixin reset-links {
	&:hover,
	&:active {
		background-color: transparent;
		box-shadow: none;
	}
}

/**
 * General container mixin.
 * Used in the header and footer.
 *
 * Expected Usage:
 * @include container;
 */

@mixin container {
	width: 100%;
	max-width: $content-width-max;
	margin: 0 auto;
	padding: 0 20px;

	/**
	 * Custom breakpoint to ensure padding is not removed at 1400px because the max-width
	 * of the container is also 1400px. If we remove the padding at 1400px there would be
	 * screen sizes between 1400px and 1440px where the content is too close to the edge
	 * of the screen.
	 */
	@media ( min-width: 1440px ) {
		padding: 0;
	}
}


/**
 * Example mixin of link with directional arrow SVG.
 *
 * Expected Usage:
 * @include link-arrow( left, blue );
 *
 * @param $direction String Determines whether the aroow points forwards or backwards.
 * @param $colour String Determines the colour of the arrow. Note, hex colours don't work here.
 */

@mixin link-arrow(
	$direction: right,
	$colour: blue,
) {
	&,
	&:visited {
		position: relative;

		&::after {
			content: "";
			display: inline-block;
			width: 12px;
			height: 12px;
			background-repeat: no-repeat;
			background-size: 8px 12px;
			background-position: 50% 50%;
			background-image: svg-encode( $vb-8-12, $colour, $draw-mc-link-arrow );
			margin-left: px-to-rem( 4 );
			margin-right: px-to-rem( 4 );
		}

		@if $direction == left {
			padding-left: $spacing-rem * 3;

			&::after {
				transform: rotate( 180deg );
				left: 0;
				position: absolute;
				top: 2px;
			}
		}

		@if $direction == right {
			padding-right: $spacing-rem * 3;

			&::after {
				position: absolute;
				right: 0;
				top: 2px;
			}
		}

		@if $direction == down {
			&::after {
				transform: rotate( 90deg );
				right: 0;
			}
		}

		@if $direction == up {
			&::after {
				transform: rotate( 270deg );
				right: 0;
			}
		}
	}
}
